pipeline{
	agent any
	tools {
		maven "MAVEN3"
		jdk "OracleJDK8"
	}
	environment{
		registryCredential = 'ecr:us-east-2:awscreds'
		appRegistry = '225785247622.dkr.ecr.us-east-2.amazonaws.com/vprofileappimg'
		vprofileRegistry = 'https://225785247622.dkr.ecr.us-east-2.amazonaws.com'

		cluster = 'vprofile'
		service = 'vprofileappsvc'
	}

	stages{
		stage('FETCH CODE'){
			steps{
				git branch: 'docker', url:'https://github.com/devopshydclub/vprofile-project.git'
			}
		}
		stage('BUILD'){
			steps{
				sh 'mvn install -DskipTests'
			}

			post {
				success {
					echo 'Build Success! Now Archiving it.'
					archiveArtifacts artifacts: '**/target/*.war'
				}
				failure {
					echo 'Build Failure'
				}
			}
		}

		stage('UNIT TEST'){
			steps{
				sh 'mvn test'
			}

		}

		stage('CHECKSTYLE ANALYSIS') {
			steps{
				sh 'mvn checkstyle:checkstyle'
			}
		}

		stage('CODE ANALYSIS WITH SONARQUBE') {
            environment {
             scannerHome = tool 'sonar4.7'
            }
            steps {
                withSonarQubeEnv('sonar') {
                    sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
                }

                
            }
        }

		stage('QUALITY GATE'){
			steps{
				timeout(time: 1, unit: 'HOURS') {
					waitForQualityGate abortPipeline: true
				}
			}
		}

		stage('BUILD IMAGE'){
			steps{
				script{
					dockerImage = docker.build(appRegistry + ":$BUILD_NUMBER" , "./Docker-files/app/multistage/")
				}
			}
		}

		stage('UPLOAD APP IMAGE'){
			steps{
				script{
					docker.withRegistry(vprofileRegistry, registryCredential){
						dockerImage.push("$BUILD_NUMBER")
						dockerImage.push("latest")
					}
				}
			}
		}

		stage('DEPLOY TO ECS'){
			steps{
				withAWS(credentials: 'awscreds',region:'us-east-2'){
					sh "aws ecs update-service --cluster ${cluster} --service ${service} --force-new-deployment"
				}
			}
		}
		
	}

	

}